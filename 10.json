{"heading":"Protecting against SQL injection","explains":{"@Example":"This is a location which we can replace with a parameter that has been protected against SQL injection","SqlCommand.Parameters.Add(?, ?)":"Adds a parameter (but not a value) to our SqlCommand object. The first parameter is the location token and the second is the data type","sqlCommand.Parameters[\"?\"].Value":"This will set the value to be placed at the location specified in square brackets","sqlCommand.Parameters.AddWithValue":"Adds a parameter and a value to our SqlCommand object. The first parameter is the location token and the second is the value. The data type is worked out automatically"},"exampleDescription":"In this example parameters are added to a SqlCommand object, because this functionality automatically protects against SQL injection","example":"SqlConnection sqlConnection = new SqlConnection(@\"...\");\n\nSqlCommand sqlCommand = new SqlCommand(\"INSERT INTO dbo.[Table] VALUES (@Name, @Age)\", sqlConnection);\n\n//Option 1\nsqlCommand.Parameters.Add(\"@Name\", SqlDbType.VarChar);\nsqlCommand.Parameters[\"@Name\"].Value = nameAddBox.Text;\n\n//Option 2\nsqlCommand.Parameters.AddWithValue(\"@Age\", ageAddNumeric.Value);\n\nsqlConnection.Open();\nsqlCommand.ExecuteNonQuery(); // Executes the INSERT command\nsqlConnection.Close();","extra":""}