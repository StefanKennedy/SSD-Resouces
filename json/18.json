{"heading":"Timetabling","explains":{},"exampleDescription":"Timetabling can be difficult to wrap your head around, so when you think about a timetable of time slots, you can imagine a big collection of timeslots stretching out infinitely into the future and all you have to do is write the details into a slot. It’s not so easy to store that in a computer, since we’d need an infinite amount of storage, and an infinite amount of time to generate all of the slots. Instead we can represent this in a less obvious way. We can represent filled time slots using a record in our timeslot table, with a start and an end time; and then to represent unfilled slots we will have nothing, so no information about this time slot, not even that the time slot exists. This means that the timetable (timeslot table) will look like a collection of filled timeslots. When we want to check if a timeslot is available we could use sql to find if there is any appointment that clashes with it, which is if it meets the criteria (StartTimeA < EndTimeB) and (EndTimeA > StartTimeB) To make sure that timeslots line up one after the other, you should make the user interface only give the user a set of timeslot options, where a timeslot option starts where another one ends. By doing this, your program will fill timeslots that match up consecutively. You can also give the user a way to change how the user interface displays timeslots.<br><br>Suppose we want to have a timetable of appointments, we can do this by having an ‘Appointments’ table where each appointment row contains the time that it exists at. In this example I do this with a start time and end time: <br><br><img src='images/tutorials/Timetabling1.png'><br><br>Notice that each row contains a reference to the Tutor and Pupil that will be present at it. This means that later we can work out who will be available at what times, by querying the table for all times that occupy a particular staff member or pupil.<br><br>A query to find all appointments that a particular staff member is occupied with on the current day could be<br><pre style=\"float:left;margin-top:20px;width:100%;\"><code style=\"font-family:monospace\">SELECT Tutor.Tutor_id, Pupil.Name, Tutor.Tutor_name, Appointment_title, Start_time, End_time\n  FROM (Appointments JOIN Tutor ON Appointments.Tutor_id = Tutor.Tutor_id)\n  JOIN Pupil ON Appointments.Pupil_id = Pupil.Pupil_id\n  WHERE CAST(GETDATE() AS DATE) = CAST(Appointments.Start_time AS DATE) AND Tutor.Tutor_id = 4</code></pre>Once we have the table set up we need to create a form to allow users to add new appointments to the tables, but we also need to make sure that any of the timeslots that clash with an existing appointment for a tutor are disabled. This form could be used for creating new appointments, where slots that are already filled are disabled: <br><br><img src='images/tutorials/Timetabling2.png'> <br><br>Notice that some of the timeslot options are disabled with the text being “Filled”<br><br>To set this up, any time a user changes the Date or the Staff Id the buttons should be updated to disable only those that represent occupied timeslots. The code for this looks like this:<br><pre style=\"float:left;margin-top:20px;width:100%;\"><code style=\"font-family:monospace\">private void fillTimeslots()\n{\n  setButtonLabels(); // Re-enables all buttons and gives them the timeslot labels\n\n  SqlConnection sqlConnection = new SqlConnection();\n  sqlConnection.ConnectionString = ConfigurationManager\n    .ConnectionStrings[\"TestConnection.Properties.Settings.SSD_ResourcesConnectionString\"]\n    .ConnectionString;\n\n  SqlCommand sqlCommand = new SqlCommand(\n    \"Appointments.Start_time \"\n    + \"from (Appointments join Tutor on Appointments.Tutor_id = Tutor.Tutor_id) \"\n    + \"join Pupil on Appointments.Pupil_id = Pupil.Pupil_id \"\n    + \"WHERE CAST(@Date AS DATE) = CAST(Appointments.Start_time AS DATE)\"\n    + \"AND Appointments.Tutor_id = @Tutor_id\", sqlConnection);\n\n  sqlCommand.Parameters.AddWithValue(\"@Date\", AppointmentsDatePicker.Value);\n  sqlCommand.Parameters.AddWithValue(\"@Tutor_id\", TutorIDPicker.Value);\n\n  sqlConnection.Open();\n  SqlDataReader reader = sqlCommand.ExecuteReader();\n  while (reader.Read())\n  {\n    int buttonIndex = (reader.GetDateTime(0).Hour - 9) * 2 + reader.GetDateTime(0).Minute / 30;\n    timeslotButtons[buttonIndex].Text = \"Filled\";\n    timeslotButtons[buttonIndex].Enabled = false;\n  }\n  sqlConnection.Close();\n}</code></pre><br><br>After this you just need to add the standard code for reading the other values, and also recording which timeslot the user has clicked on most recently:","example":"public partial class AppointmentsForm : Form\n\n  const int numTimeslots = 16;\n  Button[] timeslotButtons = new Button[numTimeslots];\n\n  bool generated = false;\n\n  DateTime chosenTime;\n\n  public AppointmentsForm()\n  {\n    InitializeComponent();\n  }\n\n  private void GenerateButtons()\n  {\n    if (generated)\n    {\n      return;\n    }\n    generated = true;\n\n    int columnWidth = TimeslotsPanel.GetColumnWidths()[0];\n    for (int timeslot = 0; timeslot < numTimeslots; timeslot++)\n    {\n      timeslotButtons[timeslot] = new Button();\n      timeslotButtons[timeslot].Width = columnWidth;\n      timeslotButtons[timeslot].Click += new EventHandler(setChosenTime);\n\n      TimeslotsPanel.Controls.Add(timeslotButtons[timeslot], 0, timeslot);\n    }\n    setButtonLabels();\n  }\n\n  private void setChosenTime(object sender, EventArgs e)\n  {\n    SaveButton.Enabled = true;\n    chosenTime = Convert.ToDateTime(\n      AppointmentsDatePicker.Value.ToShortDateString() + \" \" + ((Button)sender).Text + \":00.00\");\n  }\n\n  private void setButtonLabels()\n  {\n    string[] times =\n      { \"9:00\", \"9:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\", \"12:00\",\n        \"12:30\", \"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\",\n        \"16:00\", \"16:30\", \"17:00\" };\n\n    int columnWidth = TimeslotsPanel.GetColumnWidths()[0];\n    for (int timeslot = 0; timeslot < numTimeslots; timeslot++)\n    {\n      timeslotButtons[timeslot].Text = times[timeslot];\n      timeslotButtons[timeslot].Enabled = true;\n    }\n  }\n\n  private void AppointmentsDatePicker_ValueChanged(object sender, EventArgs e)\n  {\n    fillTimeslots();\n  }\n\n  private void TimeslotsPanel_Layout(object sender, LayoutEventArgs e)\n  {\n    GenerateButtons();\n  }\n\n  private void TutorIDPicker_ValueChanged(object sender, EventArgs e)\n  {\n    fillTimeslots();\n  }\n\n  private void SaveButton_Click(object sender, EventArgs e)\n  {\n    SqlConnection sqlConnection = new SqlConnection();\n    sqlConnection.ConnectionString = ConfigurationManager\n      .ConnectionStrings[\"TestConnection.Properties.Settings.SSD_ResourcesConnectionString\"]\n      .ConnectionString;\n\n    SqlCommand sqlCommand = new SqlCommand(\n      \"INSERT INTO dbo.[Appointments] VALUES \"\n        + \"(@Pupil_id, @Tutor_id, @Appointment_title, @Start_time, @End_time)\", sqlConnection);\n\n    sqlCommand.Parameters.AddWithValue(\"@Pupil_id\", PupilIDPicker.Value);\n    sqlCommand.Parameters.AddWithValue(\"@Tutor_id\", TutorIDPicker.Value);\n    sqlCommand.Parameters.AddWithValue(\"@Appointment_title\", AppointmentTitleBox.Text);\n    sqlCommand.Parameters.AddWithValue(\"@Start_time\", chosenTime);\n    sqlCommand.Parameters.AddWithValue(\"@End_time\", chosenTime.AddMinutes(30));\n    sqlConnection.Open();\n    sqlCommand.ExecuteNonQuery(); // Executes the INSERT command\n    sqlConnection.Close();\n  }\n}"}
