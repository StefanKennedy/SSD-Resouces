{"heading":"Validating Input (Advanced)","explains":{"ref string error":"The ref keyword specifies that any changes made to the error parameter will also affect whatever variable was used to call this method"},"exampleDescription":"Since you will often need to validate the same input in multiple places, it is a good idea to extract this duplicated code into a seperate class. Here we are creating a <b>static</b> Validator class, which we can call on to check that data is a valid type of input. Using a phone number as an example:","example":"static class Validator\n{\n\n    public static Boolean allDigits(string test)\n    {\n        foreach (char c in test) // Check all characters are digits\n        {\n            if (!Char.IsDigit(c))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static Boolean isPhoneNo(string phoneNo, ref string error)\n    {\n\n        error = \"Error: \";\n\n        if (phoneNo.Length != 11)\n        {\n            error += \"Phone number should be 11 characters long. \";\n        }\n\n        if (!allDigits(phoneNo))\n        {\n            error += \"Phone number should contain digits only. \";\n        }\n\n        return error.Length == 7; // If error message was never changed then validation has passed\n    }\n\n}","extra":"Using our previous Validating Input example, this Validator class could be used as follows: <pre style=\"float:left;margin-top:20px;width:100%;\"> <code style=\"font-family:monospace\">private void SubmitButton_Click(object sender, EventArgs e)\n{\n    string error = \"\";\n    if(!Validator.isPhoneNo(PhoneNumberTextBox.Text, ref error))\n    {\n        MessageBox.Show(error, \"error\");\n        return;\n    }\n\n    // Validation passed so phone number can be saved/processed\n}</code> </pre>"}
