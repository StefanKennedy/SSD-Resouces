{"explains":{},"exampleDescription":"The previous timetabling tutorial showed how to manage timeslots using a table with a reference to the pupil and tutor that would be present at it. But what happens when there will be more than one pupil or tutor at an appointment? We could have another column, e.g. Pupil1, Pupil2 but then we could only have two pupils. We could make another row with all the exact same data about the appointment, just with the Pupil ID changed, but that's not the best idea because it wastes space and you might forget to update a row when you're changing it. The solution is to have an intermediary table that links them. <br><br> In this example I will change the appointment table so that it can have more than one Pupil. The first thing I need to do is remove the Pupil Id from the Appointments table, so it will now look like this: <br><br> <img src=\"images/tutorials/TimetablingContinued1.png\"> <br><br> And then I will create the linking table: <br><br> <img src=\"images/tutorials/TimetablingContinued2.png\"> <br><br> This new table will store all the links between Pupils and Appointments. You can create a well designed, validating form for this, but a simple one could look like this: <br><br> <img src=\"images/tutorials/TimetablingContinued3.png\"> <br><br> And then add the code to insert the links into the Appointment-Pupil table:<br><br><pre><code>private void SaveButton_Click(object sender, EventArgs e) {\n  SqlConnection sqlConnection = new SqlConnection();\n  sqlConnection.ConnectionString = ConfigurationManager.ConnectionStrings\n    [\"TestConnection.Properties.Settings.SSD_ResourcesConnectionString\"].ConnectionString;\n\n  SqlCommand sqlCommand = new SqlCommand(\n    \"INSERT INTO dbo.[Appointment-Pupil] VALUES (@Appointment_id, @Pupil_id)\", sqlConnection);\n\n  sqlCommand.Parameters.AddWithValue(\"@Appointment_id\", AppointmentIDPicker.Value);\n  sqlCommand.Parameters.AddWithValue(\"@Pupil_id\", PupilIDPicker.Value);\n\n  sqlConnection.Open();\n  sqlCommand.ExecuteNonQuery(); // Executes the INSERT command\n  sqlConnection.Close();\n}</code></pre><br>After this, you can query the pupils/appointment connection by joining the relevant tables together, for example:","example":"SELECT Appointment_title, Pupil.Pupil_name, Tutor.Tutor_name, Start_time, End_time\n  FROM (([Appointment-Pupil] JOIN Pupil on [Appointment-Pupil].Pupil_id = Pupil.Pupil_id)\n  JOIN Appointments ON [Appointment-Pupil].Appointment_id = Appointments.Appointment_id)\n  JOIN Tutor on Appointments.Tutor_id = Tutor.Tutor_id"}

