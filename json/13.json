{"heading":"Validating Input","explains":{},"exampleDescription":"When Validating a user's input, try to use built in Controls as much as possible, for example you can set the maximum and minimum values for a NumericUpDown Control: <br><br><p><img src=\"images/tutorials/Validation1.png\"></p><br>In situations where you cannot use these properties for validation, you can run checks when the user clicks a button/submits a form:","example":"private void SubmitButton_Click(object sender, EventArgs e)\n{\n    string phoneNo = PhoneNumberTextBox.Text;\n\n    string errorMessage = \"Error: \";\n\n    if(phoneNo.Length != 11)\n    {\n        errorMessage += \"Phone number should be 11 characters long. \";\n    }\n\n    foreach(char c in phoneNo)\n    {\n        if (!Char.IsDigit(c))\n        {\n            errorMessage += \"Phone number should contain digits only. \";\n            break;\n        }\n    }\n\n    if(errorMessage.Length != 7) // If errorMessage has changed\n    {\n        MessageBox.Show(errorMessage, \"Error\");\n        return;\n    }\n\n    // Validation passed, phone number can be saved\n}","extra":"In this example we are checking that the Phone Number is always 11 characters long, and that every character is a Digit. If the error message does not change then we know that there have been no validation errors, meaning that we can save/process our valid inputs"}
